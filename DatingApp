import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

class DatingApp {
	private ArrayList<User> users;
	private Compatibility compatibility;
	private Matcher matcher;

	public DatingApp() {
		users = new ArrayList<>();
		compatibility = new Compatibility();
		matcher = new Matcher();
	}

	public void addUser(User user, String birthMonth, int birthDate) {
	    String sign = getZodiacSign(birthMonth, birthDate);
	    user.setZodiacSign(sign);
	    System.out.println(user.getName() + "'s zodiac sign is " +  sign +".");
	}


	public void findSoulmate(User user) {
		String soulmateInfo = compatibility.getSoulmateInfo(user.getZodiacSign());
		if (!soulmateInfo.isEmpty()) {
			System.out.println("For " + user.getName() + ", their soulmate should be: ");
			System.out.println(soulmateInfo);
		} else {
			System.out.println("Sorry, no soulmate information found for " + user.getName());
		}
	}

	private String getZodiacSign(String birthMonth, int birthDate) {
		return compatibility.getZodiacSign(birthMonth, birthDate);
	}



	public void addPotentialMatches(User user) {
		// Add additional potential matches
		User jordan = new User("Jordan", user.getAge(), "Tennessee", new ArrayList<>(Arrays.asList("Rock climbing")), "November", 25);
		User taylor = new User("Taylor", user.getAge(), "Kentucky", new ArrayList<>(Arrays.asList("Painting")), "October", 12);
		User morgan = new User("Morgan", user.getAge(), "Florida", new ArrayList<>(Arrays.asList("Hiking")), "August", 20);
		User casey = new User("Casey", user.getAge(), "Pennsylvania", new ArrayList<>(Arrays.asList("Baking cakes")), "February", 15);
		User drew = new User("Drew", user.getAge(), "North Carolina", new ArrayList<>(Arrays.asList("Photography")), "November", 10);
		User jamie = new User("Jamie", user.getAge(), "South Carolina", new ArrayList<>(Arrays.asList("Writing poems")), "May", 18);
		User jesse = new User("Jesse", user.getAge(), "Virginia", new ArrayList<>(Arrays.asList("Play the drums")), "July", 22);
		User sam = new User("Sam", user.getAge(), "Georgia", new ArrayList<>(Arrays.asList("Swimming")), "January", 18);
		User alex = new User("Alex", user.getAge(), "Florida", new ArrayList<>(Arrays.asList("Dancing salsa")), "February", 20);
		User logan = new User("Logan", user.getAge(), "Ohio", new ArrayList<>(Arrays.asList("Reading literature books")), "September", 14);
		User avery = new User("Avery", user.getAge(), "Alabama", new ArrayList<>(Arrays.asList("Yoga")), "June", 1);
		User elliot = new User("Elliot", user.getAge(), "Michigan", new ArrayList<>(Arrays.asList("Traveling")), "December", 21);
		User rowan = new User("Rowan", user.getAge(), "Alaska", new ArrayList<>(Arrays.asList("Gardening")), "March", 10);
		User sage = new User("Sage", user.getAge(), "Tennessee", new ArrayList<>(Arrays.asList("Meditation")), "October", 25);
		User river = new User("River", user.getAge(), "Kentucky", new ArrayList<>(Arrays.asList("Kayaking")), "August", 12);
		User august = new User("August", user.getAge(), "Florida", new ArrayList<>(Arrays.asList("Painting abstract art")), "October", 20);
		User sawyer = new User("Sawyer", user.getAge(), "Pennsylvania", new ArrayList<>(Arrays.asList("Hiking")), "May", 15);
		User remi = new User("Remi", user.getAge(), "Florida", new ArrayList<>(Arrays.asList("Cooking")), "February", 10);
		User indigo = new User("Indigo", user.getAge(), "South Carolina", new ArrayList<>(Arrays.asList("Music")), "July", 2);
		User phoenix = new User("Phoenix", user.getAge(), "Virginia", new ArrayList<>(Arrays.asList("Writing")), "April", 1);
		User kim = new User("Kim", user.getAge(), "Georgia", new ArrayList<>(Arrays.asList("Playing the saxophone")), "December", 22);
		User robin = new User("Robin", user.getAge(), "Florida", new ArrayList<>(Arrays.asList("Dancing")), "April", 18);
		User ember = new User("Ember", user.getAge(), "Ohio", new ArrayList<>(Arrays.asList("Reading")), "September", 5);
		User luna = new User("Luna", user.getAge(), "Michigan", new ArrayList<>(Arrays.asList("Yoga")), "June", 9);

		users.add(jordan);
		users.add(taylor);
		users.add(morgan);
		users.add(casey);
		users.add(drew);
		users.add(jamie);
		users.add(jesse);
		users.add(sam);
		users.add(alex);
		users.add(logan);
		users.add(avery);
		users.add(elliot);
		users.add(rowan);
		users.add(sage);
		users.add(river);
		users.add(august);
		users.add(sawyer);
		users.add(remi);
		users.add(indigo);
		users.add(phoenix);
		users.add(kim);
		users.add(ember);
		users.add(luna);
		
	}

	public void displayMatches() {
		for (User user : users) {
			if (!user.getName().equals(user.getName())) { // exclude the current user
				System.out.println(user.getName());
			}
		}
	}


	public void chooseMatch(User user) {
		Map<String, User> usersByName = new HashMap<>();
		List<User> matches = new ArrayList<>();
		for (User match : users) {
			usersByName.put(match.getName().toLowerCase(), match);
			matches.add(match);
		}
		Scanner scanner = new Scanner(System.in);
		User chosenMatch = null;
		while (chosenMatch == null) {
			System.out.println("Matches for you to choose from:");
			for (User match : matches) {
				System.out.println(match.getName());
			}
			System.out.print("Who would you choose? ");
			String chosenMatchName = scanner.nextLine().toLowerCase(); // Convert to lowercase
			chosenMatch = usersByName.get(chosenMatchName);
			if (chosenMatch == null) {
				System.out.println("Invalid choice. Please choose from the listed matches.");
			} else {
				String compatibilitySign = matcher.getCompatibilitySign(user.getZodiacSign(), chosenMatch.getZodiacSign());
				if (compatibilitySign != null) {
					System.out.println("Compatibility sign between you and " + chosenMatch.getName() + ": " + compatibilitySign);
					System.out.println("Congratulations! You found a match with " + chosenMatch.getName() + "!");
					// Print the chosen match's details
			        System.out.println("Chosen Match's Details:");
			        System.out.println("Name: " + chosenMatch.getName());
			        System.out.println("Age: " + chosenMatch.getAge());
			        System.out.println("Location: " + chosenMatch.getLocation());
			        System.out.println("Interests: " + chosenMatch.getInterests());
			       
				} else {
					System.out.println("Unfortunately, you are not compatible with " + chosenMatch.getName() + ".");
					chosenMatch = null; // Reset chosenMatch to null to loop again
				}
			}
		}
		
		System.out.println("Ps: This program is designed to simulate a dating app,so it's not meant to be taken seriously.");
		System.out.println("The compatibility signs and matches are just for fun and not based on any real astrological or scientific principles.");
	}
}
